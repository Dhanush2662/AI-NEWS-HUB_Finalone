{"ast":null,"code":"var _jsxFileName = \"D:\\\\Capstoneprojectai\\\\Newsapp\\\\NewsFeed\\\\src\\\\components\\\\News.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import NewsItems from \"./NewsItems\";\n// import Spinner from \"./Spinner\";\n// import PropTypes from \"prop-types\";\n// import InfiniteScroll from \"react-infinite-scroll-component\";\n\n// const News = (props) => {\n//   const [articles, setArticles] = useState([]); // State to store articles\n//   const [loading, setLoading] = useState(true); // State to handle loading spinner\n//   const [page, setPage] = useState(1); // State for current page\n//   const [totalResults, setTotalResults] = useState(0); // Total results from the API\n\n//   // Capitalize the first letter of a string\n//   const capitalizeFirstLetter = (string) => {\n//     return string.charAt(0).toUpperCase() + string.slice(1);\n//   };\n\n//   // Fetch news articles and update the state\n//   const updateNews = async () => {\n//     props.setProgress(10);\n//     const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&category=${props.category}&apiKey=11e2c80f95584684a9a6f1849b8c4c48&page=${page}&pageSize=${props.pageSize}`;\n//     setLoading(true);\n//     try {\n//       let data = await fetch(url);\n//       props.setProgress(30);\n//       let parsedData = await data.json();\n//       props.setProgress(70);\n//       setArticles(parsedData.articles || []);\n//       setTotalResults(parsedData.totalResults || 0);\n//       setLoading(false);\n//       props.setProgress(100);\n//     } catch (error) {\n//       console.error(\"Failed to fetch news:\", error);\n//       setLoading(false);\n//     }\n//   };\n\n//   const fetchMoreData = async () => {\n//     const url = `https://newsapi.org/v2/top-headlines?country=${\n//       props.country\n//     }&category=${props.category}&apiKey=11e2c80f95584684a9a6f1849b8c4c48&page=${\n//       page + 1\n//     }&pageSize=${props.pageSize}`;\n//     setPage((prevPage) => prevPage + 1);\n//     try {\n//       let data = await fetch(url);\n//       let parsedData = await data.json();\n//       setArticles((prevArticles) =>\n//         prevArticles.concat(parsedData.articles || [])\n//       );\n//       setTotalResults(parsedData.totalResults || 0);\n//     } catch (error) {\n//       console.error(\"Failed to fetch more news:\", error);\n//     }\n//   };\n\n//   // Effect to fetch news on component mount\n//   useEffect(() => {\n//     document.title = `${capitalizeFirstLetter(props.category)} - NewsUpdate`;\n//     updateNews();\n//     // eslint-disable-next-line\n//   }, []); // Empty dependency array ensures this runs only once\n\n//   return (\n//     <>\n//       <h1\n//         className=\"text-center\"\n//         style={{ margin: \"35px 0px\", marginTop: \"90px\" }}\n//       >\n//         NewsUpdate - Top {capitalizeFirstLetter(props.category)} Headlines\n//       </h1>\n//       {loading && <Spinner />} {/* Show spinner while loading */}\n//       <InfiniteScroll\n//         dataLength={articles ? articles.length : 0} // Handle undefined safely\n//         next={fetchMoreData}\n//         hasMore={articles.length < totalResults} // Check if there are more articles to load\n//         loader={<Spinner />} // Spinner for infinite scroll loading\n//       >\n//         <div className=\"container\">\n//           <div className=\"row\">\n//             {articles.map((element) => (\n//               <div className=\"col-md-4\" key={element.url}>\n//                 <NewsItems\n//                   title={element.title || \"No Title Available\"}\n//                   description={\n//                     element.description || \"No Description Available\"\n//                   }\n//                   imageUrl={element.urlToImage}\n//                   newsUrl={element.url}\n//                   author={element.author}\n//                   date={element.publishedAt}\n//                   source={element.source.name}\n//                 />\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </InfiniteScroll>\n//     </>\n//   );\n// };\n\n// // Default props for the News component\n// News.defaultProps = {\n//   country: \"us\",\n//   pageSize: 8,\n//   category: \"general\",\n// };\n\n// // Prop types for the News component\n// News.propTypes = {\n//   country: PropTypes.string,\n//   pageSize: PropTypes.number,\n//   category: PropTypes.string,\n//   setProgress: PropTypes.func.isRequired,\n// };\n\n// export default News;\n\nimport React, { useEffect, useState } from \"react\";\nimport NewsItems from \"./NewsItems\";\nimport Spinner from \"./Spinner\";\nimport PropTypes from \"prop-types\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst News = props => {\n  _s();\n  const [articles, setArticles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [totalResults, setTotalResults] = useState(0);\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  const updateNews = async () => {\n    props.setProgress(10);\n    const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}&page=${page}&pageSize=${props.pageSize}`;\n    setLoading(true);\n    try {\n      let data = await fetch(url);\n      props.setProgress(30);\n      let parsedData = await data.json();\n      props.setProgress(70);\n      setArticles(parsedData.articles || []);\n      setTotalResults(parsedData.totalResults || 0);\n      setLoading(false);\n      props.setProgress(100);\n    } catch (error) {\n      console.error(\"Failed to fetch news:\", error);\n      setLoading(false);\n    }\n  };\n  const fetchMoreData = async () => {\n    const nextPage = page + 1;\n    const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}&page=${nextPage}&pageSize=${props.pageSize}`;\n    setPage(nextPage);\n    try {\n      let data = await fetch(url);\n      let parsedData = await data.json();\n      setArticles(prevArticles => prevArticles.concat(parsedData.articles || []));\n      setTotalResults(parsedData.totalResults || 0);\n    } catch (error) {\n      console.error(\"Failed to fetch more news:\", error);\n    }\n  };\n  useEffect(() => {\n    document.title = `${capitalizeFirstLetter(props.category)} - NewsUpdate`;\n    updateNews();\n    // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      style: {\n        margin: \"35px 0px\",\n        marginTop: \"90px\"\n      },\n      children: [\"NewsUpdate - Top \", capitalizeFirstLetter(props.category), \" Headlines\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: articles ? articles.length : 0,\n      next: fetchMoreData,\n      hasMore: articles.length < totalResults,\n      loader: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: articles.map(element => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: /*#__PURE__*/_jsxDEV(NewsItems, {\n              title: element.title || \"No Title Available\",\n              description: element.description || \"No Description Available\",\n              imageUrl: element.urlToImage,\n              newsUrl: element.url,\n              author: element.author,\n              date: element.publishedAt,\n              source: element.source.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)\n          }, element.url, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(News, \"DJGT5z9fcO00SGn/4yt1PHL84Ps=\");\n_c = News;\nNews.defaultProps = {\n  country: \"us\",\n  pageSize: 8,\n  category: \"general\"\n};\nNews.propTypes = {\n  country: PropTypes.string,\n  pageSize: PropTypes.number,\n  category: PropTypes.string,\n  setProgress: PropTypes.func.isRequired\n};\nexport default News;\nvar _c;\n$RefreshReg$(_c, \"News\");","map":{"version":3,"names":["React","useEffect","useState","NewsItems","Spinner","PropTypes","InfiniteScroll","jsxDEV","_jsxDEV","Fragment","_Fragment","News","props","_s","articles","setArticles","loading","setLoading","page","setPage","totalResults","setTotalResults","capitalizeFirstLetter","string","charAt","toUpperCase","slice","updateNews","setProgress","url","country","category","apiKey","pageSize","data","fetch","parsedData","json","error","console","fetchMoreData","nextPage","prevArticles","concat","document","title","children","className","style","margin","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","dataLength","length","next","hasMore","loader","map","element","description","imageUrl","urlToImage","newsUrl","author","date","publishedAt","source","name","_c","defaultProps","propTypes","number","func","isRequired","$RefreshReg$"],"sources":["D:/Capstoneprojectai/Newsapp/NewsFeed/src/components/News.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import NewsItems from \"./NewsItems\";\r\n// import Spinner from \"./Spinner\";\r\n// import PropTypes from \"prop-types\";\r\n// import InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\n// const News = (props) => {\r\n//   const [articles, setArticles] = useState([]); // State to store articles\r\n//   const [loading, setLoading] = useState(true); // State to handle loading spinner\r\n//   const [page, setPage] = useState(1); // State for current page\r\n//   const [totalResults, setTotalResults] = useState(0); // Total results from the API\r\n\r\n//   // Capitalize the first letter of a string\r\n//   const capitalizeFirstLetter = (string) => {\r\n//     return string.charAt(0).toUpperCase() + string.slice(1);\r\n//   };\r\n\r\n//   // Fetch news articles and update the state\r\n//   const updateNews = async () => {\r\n//     props.setProgress(10);\r\n//     const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&category=${props.category}&apiKey=11e2c80f95584684a9a6f1849b8c4c48&page=${page}&pageSize=${props.pageSize}`;\r\n//     setLoading(true);\r\n//     try {\r\n//       let data = await fetch(url);\r\n//       props.setProgress(30);\r\n//       let parsedData = await data.json();\r\n//       props.setProgress(70);\r\n//       setArticles(parsedData.articles || []);\r\n//       setTotalResults(parsedData.totalResults || 0);\r\n//       setLoading(false);\r\n//       props.setProgress(100);\r\n//     } catch (error) {\r\n//       console.error(\"Failed to fetch news:\", error);\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const fetchMoreData = async () => {\r\n//     const url = `https://newsapi.org/v2/top-headlines?country=${\r\n//       props.country\r\n//     }&category=${props.category}&apiKey=11e2c80f95584684a9a6f1849b8c4c48&page=${\r\n//       page + 1\r\n//     }&pageSize=${props.pageSize}`;\r\n//     setPage((prevPage) => prevPage + 1);\r\n//     try {\r\n//       let data = await fetch(url);\r\n//       let parsedData = await data.json();\r\n//       setArticles((prevArticles) =>\r\n//         prevArticles.concat(parsedData.articles || [])\r\n//       );\r\n//       setTotalResults(parsedData.totalResults || 0);\r\n//     } catch (error) {\r\n//       console.error(\"Failed to fetch more news:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Effect to fetch news on component mount\r\n//   useEffect(() => {\r\n//     document.title = `${capitalizeFirstLetter(props.category)} - NewsUpdate`;\r\n//     updateNews();\r\n//     // eslint-disable-next-line\r\n//   }, []); // Empty dependency array ensures this runs only once\r\n\r\n//   return (\r\n//     <>\r\n//       <h1\r\n//         className=\"text-center\"\r\n//         style={{ margin: \"35px 0px\", marginTop: \"90px\" }}\r\n//       >\r\n//         NewsUpdate - Top {capitalizeFirstLetter(props.category)} Headlines\r\n//       </h1>\r\n//       {loading && <Spinner />} {/* Show spinner while loading */}\r\n//       <InfiniteScroll\r\n//         dataLength={articles ? articles.length : 0} // Handle undefined safely\r\n//         next={fetchMoreData}\r\n//         hasMore={articles.length < totalResults} // Check if there are more articles to load\r\n//         loader={<Spinner />} // Spinner for infinite scroll loading\r\n//       >\r\n//         <div className=\"container\">\r\n//           <div className=\"row\">\r\n//             {articles.map((element) => (\r\n//               <div className=\"col-md-4\" key={element.url}>\r\n//                 <NewsItems\r\n//                   title={element.title || \"No Title Available\"}\r\n//                   description={\r\n//                     element.description || \"No Description Available\"\r\n//                   }\r\n//                   imageUrl={element.urlToImage}\r\n//                   newsUrl={element.url}\r\n//                   author={element.author}\r\n//                   date={element.publishedAt}\r\n//                   source={element.source.name}\r\n//                 />\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       </InfiniteScroll>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// // Default props for the News component\r\n// News.defaultProps = {\r\n//   country: \"us\",\r\n//   pageSize: 8,\r\n//   category: \"general\",\r\n// };\r\n\r\n// // Prop types for the News component\r\n// News.propTypes = {\r\n//   country: PropTypes.string,\r\n//   pageSize: PropTypes.number,\r\n//   category: PropTypes.string,\r\n//   setProgress: PropTypes.func.isRequired,\r\n// };\r\n\r\n// export default News;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport NewsItems from \"./NewsItems\";\r\nimport Spinner from \"./Spinner\";\r\nimport PropTypes from \"prop-types\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst News = (props) => {\r\n  const [articles, setArticles] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [page, setPage] = useState(1);\r\n  const [totalResults, setTotalResults] = useState(0);\r\n\r\n  const capitalizeFirstLetter = (string) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  };\r\n\r\n  const updateNews = async () => {\r\n    props.setProgress(10);\r\n    const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}&page=${page}&pageSize=${props.pageSize}`;\r\n    setLoading(true);\r\n    try {\r\n      let data = await fetch(url);\r\n      props.setProgress(30);\r\n      let parsedData = await data.json();\r\n      props.setProgress(70);\r\n      setArticles(parsedData.articles || []);\r\n      setTotalResults(parsedData.totalResults || 0);\r\n      setLoading(false);\r\n      props.setProgress(100);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch news:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchMoreData = async () => {\r\n    const nextPage = page + 1;\r\n    const url = `https://newsapi.org/v2/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}&page=${nextPage}&pageSize=${props.pageSize}`;\r\n    setPage(nextPage);\r\n    try {\r\n      let data = await fetch(url);\r\n      let parsedData = await data.json();\r\n      setArticles((prevArticles) =>\r\n        prevArticles.concat(parsedData.articles || [])\r\n      );\r\n      setTotalResults(parsedData.totalResults || 0);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch more news:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = `${capitalizeFirstLetter(props.category)} - NewsUpdate`;\r\n    updateNews();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1\r\n        className=\"text-center\"\r\n        style={{ margin: \"35px 0px\", marginTop: \"90px\" }}\r\n      >\r\n        NewsUpdate - Top {capitalizeFirstLetter(props.category)} Headlines\r\n      </h1>\r\n      {loading && <Spinner />}\r\n      <InfiniteScroll\r\n        dataLength={articles ? articles.length : 0}\r\n        next={fetchMoreData}\r\n        hasMore={articles.length < totalResults}\r\n        loader={<Spinner />}\r\n      >\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            {articles.map((element) => (\r\n              <div className=\"col-md-4\" key={element.url}>\r\n                <NewsItems\r\n                  title={element.title || \"No Title Available\"}\r\n                  description={\r\n                    element.description || \"No Description Available\"\r\n                  }\r\n                  imageUrl={element.urlToImage}\r\n                  newsUrl={element.url}\r\n                  author={element.author}\r\n                  date={element.publishedAt}\r\n                  source={element.source.name}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </InfiniteScroll>\r\n    </>\r\n  );\r\n};\r\n\r\nNews.defaultProps = {\r\n  country: \"us\",\r\n  pageSize: 8,\r\n  category: \"general\",\r\n};\r\n\r\nNews.propTypes = {\r\n  country: PropTypes.string,\r\n  pageSize: PropTypes.number,\r\n  category: PropTypes.string,\r\n  setProgress: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default News;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}