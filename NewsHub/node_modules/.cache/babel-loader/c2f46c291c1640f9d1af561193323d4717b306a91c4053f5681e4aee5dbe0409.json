{"ast":null,"code":"class GeminiService {\n  constructor() {\n    this.baseUrl = 'http://localhost:3001/api/gemini';\n  }\n  async summarizeNews(newsContent) {\n    try {\n      console.log('GeminiService: Making request to:', `${this.baseUrl}/summarize`);\n      console.log('GeminiService: Request body:', {\n        newsContent: newsContent.substring(0, 100) + '...'\n      });\n      const response = await fetch(`${this.baseUrl}/summarize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          newsContent: newsContent\n        })\n      });\n      console.log('GeminiService: Response status:', response.status);\n      console.log('GeminiService: Response ok:', response.ok);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('GeminiService: Error response:', errorText);\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch (e) {\n          errorData = {\n            error: errorText\n          };\n        }\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to generate summary`);\n      }\n      const data = await response.json();\n      console.log('GeminiService: Success response:', data);\n      return data;\n    } catch (error) {\n      console.error('GeminiService: Catch block error:', error);\n      console.error('GeminiService: Error type:', error.constructor.name);\n      console.error('GeminiService: Error message:', error.message);\n      throw error;\n    }\n  }\n}\nconst geminiServiceInstance = new GeminiService();\nexport default geminiServiceInstance;","map":{"version":3,"names":["GeminiService","constructor","baseUrl","summarizeNews","newsContent","console","log","substring","response","fetch","method","headers","body","JSON","stringify","status","ok","errorText","text","error","errorData","parse","e","Error","data","json","name","message","geminiServiceInstance"],"sources":["D:/Capstoneprojectai/Newsapp/NewsHub/src/services/geminiService.js"],"sourcesContent":["class GeminiService {\n  constructor() {\n    this.baseUrl = 'http://localhost:3001/api/gemini';\n  }\n\n  async summarizeNews(newsContent) {\n    try {\n      console.log('GeminiService: Making request to:', `${this.baseUrl}/summarize`);\n      console.log('GeminiService: Request body:', { newsContent: newsContent.substring(0, 100) + '...' });\n      \n      const response = await fetch(`${this.baseUrl}/summarize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          newsContent: newsContent\n        })\n      });\n      \n      console.log('GeminiService: Response status:', response.status);\n      console.log('GeminiService: Response ok:', response.ok);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('GeminiService: Error response:', errorText);\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch (e) {\n          errorData = { error: errorText };\n        }\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to generate summary`);\n      }\n      \n      const data = await response.json();\n      console.log('GeminiService: Success response:', data);\n      return data;\n      \n    } catch (error) {\n      console.error('GeminiService: Catch block error:', error);\n      console.error('GeminiService: Error type:', error.constructor.name);\n      console.error('GeminiService: Error message:', error.message);\n      throw error;\n    }\n  }\n}\n\nconst geminiServiceInstance = new GeminiService();\nexport default geminiServiceInstance;"],"mappings":"AAAA,MAAMA,aAAa,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,kCAAkC;EACnD;EAEA,MAAMC,aAAaA,CAACC,WAAW,EAAE;IAC/B,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE,GAAG,IAAI,CAACJ,OAAO,YAAY,CAAC;MAC7EG,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE;QAAEF,WAAW,EAAEA,WAAW,CAACG,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG;MAAM,CAAC,CAAC;MAEnG,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACP,OAAO,YAAY,EAAE;QACxDQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBV,WAAW,EAAEA;QACf,CAAC;MACH,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEE,QAAQ,CAACO,MAAM,CAAC;MAC/DV,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEE,QAAQ,CAACQ,EAAE,CAAC;MAEvD,IAAI,CAACR,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvCb,OAAO,CAACc,KAAK,CAAC,gCAAgC,EAAEF,SAAS,CAAC;QAC1D,IAAIG,SAAS;QACb,IAAI;UACFA,SAAS,GAAGP,IAAI,CAACQ,KAAK,CAACJ,SAAS,CAAC;QACnC,CAAC,CAAC,OAAOK,CAAC,EAAE;UACVF,SAAS,GAAG;YAAED,KAAK,EAAEF;UAAU,CAAC;QAClC;QACA,MAAM,IAAIM,KAAK,CAACH,SAAS,CAACD,KAAK,IAAI,QAAQX,QAAQ,CAACO,MAAM,8BAA8B,CAAC;MAC3F;MAEA,MAAMS,IAAI,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;MAClCpB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEkB,IAAI,CAAC;MACrD,OAAOA,IAAI;IAEb,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDd,OAAO,CAACc,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAClB,WAAW,CAACyB,IAAI,CAAC;MACnErB,OAAO,CAACc,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACQ,OAAO,CAAC;MAC7D,MAAMR,KAAK;IACb;EACF;AACF;AAEA,MAAMS,qBAAqB,GAAG,IAAI5B,aAAa,CAAC,CAAC;AACjD,eAAe4B,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}