{"ast":null,"code":"// API Configuration\nconst API_CONFIG = {\n  NEWS_FEED: 'http://localhost:3001',\n  FACT_CHECKER: 'http://localhost:5001',\n  BIAS_CHECKER: 'http://localhost:5002',\n  SUMMARIZER: 'http://localhost:5003'\n};\n\n// Generic API request function with error handling\nexport const apiRequest = async (url, options = {}) => {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    console.error('API request failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// News API\nexport const newsAPI = {\n  async getNews(params = {}) {\n    try {\n      var _data$articles;\n      const queryParams = new URLSearchParams();\n      if (params.category && params.category !== 'all') {\n        queryParams.append('category', params.category);\n      }\n      if (params.country) {\n        queryParams.append('country', params.country);\n      }\n      if (params.q) {\n        queryParams.append('q', params.q);\n      }\n      if (params.page) {\n        queryParams.append('page', params.page);\n      }\n      if (params.pageSize || params.limit) {\n        queryParams.append('pageSize', params.pageSize || params.limit);\n      }\n      const url = `${API_CONFIG.NEWS_FEED}/api/news${queryParams.toString() ? '?' + queryParams.toString() : ''}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to fetch news');\n      }\n\n      // Transform NewsAPI response to match frontend expectations\n      return {\n        articles: ((_data$articles = data.articles) === null || _data$articles === void 0 ? void 0 : _data$articles.map(article => {\n          var _article$source;\n          return {\n            id: article.url || Math.random().toString(36).substr(2, 9),\n            title: article.title,\n            summary: article.description || (article.content ? article.content.substring(0, 200) + '...' : 'No description available'),\n            source: ((_article$source = article.source) === null || _article$source === void 0 ? void 0 : _article$source.name) || 'Unknown Source',\n            publishedAt: article.publishedAt,\n            url: article.url,\n            category: params.category || 'general',\n            image: article.urlToImage || 'https://via.placeholder.com/300x200?text=No+Image',\n            credibilityScore: Math.floor(Math.random() * 20) + 75,\n            // Mock credibility score between 75-95\n            author: article.author\n          };\n        })) || [],\n        totalResults: data.totalResults || 0,\n        status: data.status || 'ok'\n      };\n    } catch (error) {\n      console.error('News API Error:', error);\n      throw error;\n    }\n  }\n};\n\n// Fact Checker API\nexport const factCheckerAPI = {\n  checkFact: async text => {\n    try {\n      var _response$supporting_;\n      const response = await apiRequest(`${API_CONFIG.FACT_CHECKER.baseURL}${API_CONFIG.FACT_CHECKER.endpoints.check}`, {\n        method: 'POST',\n        body: JSON.stringify({\n          text\n        })\n      });\n\n      // Transform response to match frontend expectations\n      return {\n        verdict: response.final_verdict || 'Unable to determine',\n        confidence: response.credibility_score || 0,\n        sources: ((_response$supporting_ = response.supporting_articles) === null || _response$supporting_ === void 0 ? void 0 : _response$supporting_.map(article => ({\n          title: article.title || 'Unknown',\n          url: article.link || '#',\n          credibility: 80 // Default credibility\n        }))) || [],\n        explanation: response.reasoning || 'No explanation available',\n        timestamp: new Date().toISOString(),\n        executionTime: response.execution_time || 0,\n        confidenceLevel: response.confidence_level || 'Low',\n        claimAnalysis: response.claim_analysis || {},\n        summary: response.summary || '',\n        biasAnalysis: response.bias_analysis || {}\n      };\n    } catch (error) {\n      console.warn('Fact checker API unavailable, using mock data');\n      // Mock response for development\n      return {\n        verdict: 'Service Unavailable',\n        confidence: 0,\n        sources: [],\n        explanation: 'Fact checking service is currently unavailable. Please try again later.',\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n};\n\n// Bias Checker API\nexport const biasCheckerAPI = {\n  checkBias: async text => {\n    try {\n      const response = await apiRequest(`${API_CONFIG.BIAS_CHECKER.baseURL}${API_CONFIG.BIAS_CHECKER.endpoints.check}`, {\n        method: 'POST',\n        body: JSON.stringify({\n          text\n        })\n      });\n\n      // Transform response to match frontend expectations\n      return {\n        biasScore: response.confidence_score || 0,\n        biasType: response.bias_category || 'Unknown',\n        confidence: response.confidence_score || 0,\n        indicators: response.bias_indicators || [],\n        recommendation: _getBiasRecommendation(response.bias_category),\n        timestamp: new Date().toISOString(),\n        politicalLeaning: response.political_leaning || 'Unknown',\n        reliabilityScore: response.reliability_score || 0,\n        analysisDetails: response.analysis_details || {}\n      };\n    } catch (error) {\n      console.warn('Bias checker API unavailable, using mock data');\n      // Mock response for development\n      return {\n        biasScore: 0,\n        biasType: 'Service Unavailable',\n        confidence: 0,\n        indicators: ['Bias checking service is currently unavailable'],\n        recommendation: 'Please try again later when the service is available.',\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n};\n\n// Helper function to generate bias recommendations\nfunction _getBiasRecommendation(biasCategory) {\n  const recommendations = {\n    'Left': 'This content shows a left-leaning bias. Consider reading conservative sources for balance.',\n    'Left-Center': 'This content has a slight left-leaning bias. Generally reliable but consider diverse sources.',\n    'Least Biased': 'This content appears to be relatively unbiased and factual.',\n    'Right-Center': 'This content has a slight right-leaning bias. Generally reliable but consider diverse sources.',\n    'Right': 'This content shows a right-leaning bias. Consider reading liberal sources for balance.',\n    'Unknown': 'Unable to determine bias. Consider multiple sources for verification.'\n  };\n  return recommendations[biasCategory] || 'Consider reading multiple sources for a balanced perspective.';\n}\n\n// Summarizer API\nexport const summarizerAPI = {\n  summarize: async (text, options = {}) => {\n    try {\n      var _response$keywords, _response$sentiment_a;\n      const requestBody = {\n        text,\n        sentences: options.sentences || 3\n      };\n\n      // Add optional fields if provided\n      if (options.title) requestBody.title = options.title;\n      if (options.authors) requestBody.authors = options.authors;\n      if (options.source) requestBody.source = options.source;\n      if (options.url) requestBody.url = options.url;\n      const response = await apiRequest(`${API_CONFIG.SUMMARIZER.baseURL}${API_CONFIG.SUMMARIZER.endpoints.summarize}`, {\n        method: 'POST',\n        body: JSON.stringify(requestBody)\n      });\n\n      // Transform response to match frontend expectations\n      return {\n        summary: response.summary || 'No summary available',\n        originalLength: response.original_length || text.length,\n        summaryLength: response.summary_length || 0,\n        compressionRatio: response.compression_ratio || 0,\n        keyPoints: ((_response$keywords = response.keywords) === null || _response$keywords === void 0 ? void 0 : _response$keywords.slice(0, 5)) || [],\n        sentiment: ((_response$sentiment_a = response.sentiment_analysis) === null || _response$sentiment_a === void 0 ? void 0 : _response$sentiment_a.sentiment) || 'Unknown',\n        timestamp: new Date().toISOString(),\n        sentimentAnalysis: response.sentiment_analysis || {},\n        keywords: response.keywords || [],\n        readability: response.readability || {},\n        processingTime: response.processing_time || 0,\n        articleInfo: response.article_info || {},\n        qualityMetrics: response.quality_metrics || {}\n      };\n    } catch (error) {\n      console.warn('Summarizer API unavailable, using mock data');\n      // Mock response for development\n      const sentences = text.split('.').filter(s => s.trim().length > 0);\n      const summaryLength = Math.min(3, sentences.length);\n      const summary = sentences.slice(0, summaryLength).join('.') + '.';\n      return {\n        summary: summary || 'Unable to generate summary',\n        originalLength: text.length,\n        summaryLength: summary.length,\n        compressionRatio: Math.round(summary.length / text.length * 100),\n        keyPoints: ['Service unavailable'],\n        sentiment: 'Unknown',\n        timestamp: new Date().toISOString()\n      };\n    }\n  },\n  summarizeUrl: async (url, options = {}) => {\n    try {\n      var _response$keywords2, _response$sentiment_a2;\n      const response = await apiRequest(`${API_CONFIG.SUMMARIZER.baseURL}${API_CONFIG.SUMMARIZER.endpoints.summarize}`, {\n        method: 'POST',\n        body: JSON.stringify({\n          url,\n          sentences: options.sentences || 3\n        })\n      });\n      return {\n        summary: response.summary || 'No summary available',\n        originalLength: response.original_length || 0,\n        summaryLength: response.summary_length || 0,\n        compressionRatio: response.compression_ratio || 0,\n        keyPoints: ((_response$keywords2 = response.keywords) === null || _response$keywords2 === void 0 ? void 0 : _response$keywords2.slice(0, 5)) || [],\n        sentiment: ((_response$sentiment_a2 = response.sentiment_analysis) === null || _response$sentiment_a2 === void 0 ? void 0 : _response$sentiment_a2.sentiment) || 'Unknown',\n        timestamp: new Date().toISOString(),\n        sentimentAnalysis: response.sentiment_analysis || {},\n        keywords: response.keywords || [],\n        readability: response.readability || {},\n        processingTime: response.processing_time || 0,\n        articleInfo: response.article_info || {},\n        qualityMetrics: response.quality_metrics || {}\n      };\n    } catch (error) {\n      console.warn('Summarizer API unavailable for URL');\n      return {\n        summary: 'Unable to summarize URL content',\n        originalLength: 0,\n        summaryLength: 0,\n        compressionRatio: 0,\n        keyPoints: ['Service unavailable'],\n        sentiment: 'Unknown',\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n};\n\n// Health check for all services\nexport const healthCheck = {\n  checkAllServices: async () => {\n    const services = {\n      newsFeed: `${API_CONFIG.NEWS_FEED.baseURL}${API_CONFIG.NEWS_FEED.endpoints.health}`,\n      factChecker: `${API_CONFIG.FACT_CHECKER.baseURL}${API_CONFIG.FACT_CHECKER.endpoints.health}`,\n      biasChecker: `${API_CONFIG.BIAS_CHECKER.baseURL}${API_CONFIG.BIAS_CHECKER.endpoints.health}`,\n      summarizer: `${API_CONFIG.SUMMARIZER.baseURL}${API_CONFIG.SUMMARIZER.endpoints.health}`\n    };\n    const results = {};\n    for (const [service, url] of Object.entries(services)) {\n      try {\n        const response = await fetch(url, {\n          timeout: 5000\n        });\n        results[service] = response.ok;\n      } catch (error) {\n        results[service] = false;\n      }\n    }\n    return results;\n  }\n};\nexport default {\n  newsAPI,\n  factCheckerAPI,\n  biasCheckerAPI,\n  summarizerAPI,\n  healthCheck\n};","map":{"version":3,"names":["API_CONFIG","NEWS_FEED","FACT_CHECKER","BIAS_CHECKER","SUMMARIZER","apiRequest","url","options","response","fetch","headers","ok","Error","status","data","json","success","error","console","message","newsAPI","getNews","params","_data$articles","queryParams","URLSearchParams","category","append","country","q","page","pageSize","limit","toString","articles","map","article","_article$source","id","Math","random","substr","title","summary","description","content","substring","source","name","publishedAt","image","urlToImage","credibilityScore","floor","author","totalResults","factCheckerAPI","checkFact","text","_response$supporting_","baseURL","endpoints","check","method","body","JSON","stringify","verdict","final_verdict","confidence","credibility_score","sources","supporting_articles","link","credibility","explanation","reasoning","timestamp","Date","toISOString","executionTime","execution_time","confidenceLevel","confidence_level","claimAnalysis","claim_analysis","biasAnalysis","bias_analysis","warn","biasCheckerAPI","checkBias","biasScore","confidence_score","biasType","bias_category","indicators","bias_indicators","recommendation","_getBiasRecommendation","politicalLeaning","political_leaning","reliabilityScore","reliability_score","analysisDetails","analysis_details","biasCategory","recommendations","summarizerAPI","summarize","_response$keywords","_response$sentiment_a","requestBody","sentences","authors","originalLength","original_length","length","summaryLength","summary_length","compressionRatio","compression_ratio","keyPoints","keywords","slice","sentiment","sentiment_analysis","sentimentAnalysis","readability","processingTime","processing_time","articleInfo","article_info","qualityMetrics","quality_metrics","split","filter","s","trim","min","join","round","summarizeUrl","_response$keywords2","_response$sentiment_a2","healthCheck","checkAllServices","services","newsFeed","health","factChecker","biasChecker","summarizer","results","service","Object","entries","timeout"],"sources":["D:/Capstoneprojectai/Newsapp/NewsHub/src/services/api.js"],"sourcesContent":["// API Configuration\nconst API_CONFIG = {\n  NEWS_FEED: 'http://localhost:3001',\n  FACT_CHECKER: 'http://localhost:5001',\n  BIAS_CHECKER: 'http://localhost:5002',\n  SUMMARIZER: 'http://localhost:5003'\n};\n\n// Generic API request function with error handling\nexport const apiRequest = async (url, options = {}) => {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return { success: true, data };\n  } catch (error) {\n    console.error('API request failed:', error);\n    return { success: false, error: error.message };\n  }\n};\n\n// News API\nexport const newsAPI = {\n  async getNews(params = {}) {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      if (params.category && params.category !== 'all') {\n        queryParams.append('category', params.category);\n      }\n      if (params.country) {\n        queryParams.append('country', params.country);\n      }\n      if (params.q) {\n        queryParams.append('q', params.q);\n      }\n      if (params.page) {\n        queryParams.append('page', params.page);\n      }\n      if (params.pageSize || params.limit) {\n        queryParams.append('pageSize', params.pageSize || params.limit);\n      }\n      \n      const url = `${API_CONFIG.NEWS_FEED}/api/news${queryParams.toString() ? '?' + queryParams.toString() : ''}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to fetch news');\n      }\n      \n      // Transform NewsAPI response to match frontend expectations\n      return {\n        articles: data.articles?.map(article => ({\n          id: article.url || Math.random().toString(36).substr(2, 9),\n          title: article.title,\n          summary: article.description || (article.content ? article.content.substring(0, 200) + '...' : 'No description available'),\n          source: article.source?.name || 'Unknown Source',\n          publishedAt: article.publishedAt,\n          url: article.url,\n          category: params.category || 'general',\n          image: article.urlToImage || 'https://via.placeholder.com/300x200?text=No+Image',\n          credibilityScore: Math.floor(Math.random() * 20) + 75, // Mock credibility score between 75-95\n          author: article.author\n        })) || [],\n        totalResults: data.totalResults || 0,\n        status: data.status || 'ok'\n      };\n    } catch (error) {\n      console.error('News API Error:', error);\n      throw error;\n    }\n  }\n};\n\n// Fact Checker API\nexport const factCheckerAPI = {\n  checkFact: async (text) => {\n    try {\n      const response = await apiRequest(\n        `${API_CONFIG.FACT_CHECKER.baseURL}${API_CONFIG.FACT_CHECKER.endpoints.check}`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ text })\n        }\n      );\n      \n      // Transform response to match frontend expectations\n      return {\n        verdict: response.final_verdict || 'Unable to determine',\n        confidence: response.credibility_score || 0,\n        sources: response.supporting_articles?.map(article => ({\n          title: article.title || 'Unknown',\n          url: article.link || '#',\n          credibility: 80 // Default credibility\n        })) || [],\n        explanation: response.reasoning || 'No explanation available',\n        timestamp: new Date().toISOString(),\n        executionTime: response.execution_time || 0,\n        confidenceLevel: response.confidence_level || 'Low',\n        claimAnalysis: response.claim_analysis || {},\n        summary: response.summary || '',\n        biasAnalysis: response.bias_analysis || {}\n      };\n    } catch (error) {\n      console.warn('Fact checker API unavailable, using mock data');\n      // Mock response for development\n      return {\n        verdict: 'Service Unavailable',\n        confidence: 0,\n        sources: [],\n        explanation: 'Fact checking service is currently unavailable. Please try again later.',\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n};\n\n// Bias Checker API\nexport const biasCheckerAPI = {\n  checkBias: async (text) => {\n    try {\n      const response = await apiRequest(\n        `${API_CONFIG.BIAS_CHECKER.baseURL}${API_CONFIG.BIAS_CHECKER.endpoints.check}`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ text })\n        }\n      );\n      \n      // Transform response to match frontend expectations\n      return {\n        biasScore: response.confidence_score || 0,\n        biasType: response.bias_category || 'Unknown',\n        confidence: response.confidence_score || 0,\n        indicators: response.bias_indicators || [],\n        recommendation: _getBiasRecommendation(response.bias_category),\n        timestamp: new Date().toISOString(),\n        politicalLeaning: response.political_leaning || 'Unknown',\n        reliabilityScore: response.reliability_score || 0,\n        analysisDetails: response.analysis_details || {}\n      };\n    } catch (error) {\n      console.warn('Bias checker API unavailable, using mock data');\n      // Mock response for development\n      return {\n        biasScore: 0,\n        biasType: 'Service Unavailable',\n        confidence: 0,\n        indicators: ['Bias checking service is currently unavailable'],\n        recommendation: 'Please try again later when the service is available.',\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n};\n\n// Helper function to generate bias recommendations\nfunction _getBiasRecommendation(biasCategory) {\n  const recommendations = {\n    'Left': 'This content shows a left-leaning bias. Consider reading conservative sources for balance.',\n    'Left-Center': 'This content has a slight left-leaning bias. Generally reliable but consider diverse sources.',\n    'Least Biased': 'This content appears to be relatively unbiased and factual.',\n    'Right-Center': 'This content has a slight right-leaning bias. Generally reliable but consider diverse sources.',\n    'Right': 'This content shows a right-leaning bias. Consider reading liberal sources for balance.',\n    'Unknown': 'Unable to determine bias. Consider multiple sources for verification.'\n  };\n  return recommendations[biasCategory] || 'Consider reading multiple sources for a balanced perspective.';\n}\n\n// Summarizer API\nexport const summarizerAPI = {\n  summarize: async (text, options = {}) => {\n    try {\n      const requestBody = {\n        text,\n        sentences: options.sentences || 3\n      };\n      \n      // Add optional fields if provided\n      if (options.title) requestBody.title = options.title;\n      if (options.authors) requestBody.authors = options.authors;\n      if (options.source) requestBody.source = options.source;\n      if (options.url) requestBody.url = options.url;\n      \n      const response = await apiRequest(\n        `${API_CONFIG.SUMMARIZER.baseURL}${API_CONFIG.SUMMARIZER.endpoints.summarize}`,\n        {\n          method: 'POST',\n          body: JSON.stringify(requestBody)\n        }\n      );\n      \n      // Transform response to match frontend expectations\n      return {\n        summary: response.summary || 'No summary available',\n        originalLength: response.original_length || text.length,\n        summaryLength: response.summary_length || 0,\n        compressionRatio: response.compression_ratio || 0,\n        keyPoints: response.keywords?.slice(0, 5) || [],\n        sentiment: response.sentiment_analysis?.sentiment || 'Unknown',\n        timestamp: new Date().toISOString(),\n        sentimentAnalysis: response.sentiment_analysis || {},\n        keywords: response.keywords || [],\n        readability: response.readability || {},\n        processingTime: response.processing_time || 0,\n        articleInfo: response.article_info || {},\n        qualityMetrics: response.quality_metrics || {}\n      };\n    } catch (error) {\n      console.warn('Summarizer API unavailable, using mock data');\n      // Mock response for development\n      const sentences = text.split('.').filter(s => s.trim().length > 0);\n      const summaryLength = Math.min(3, sentences.length);\n      const summary = sentences.slice(0, summaryLength).join('.') + '.';\n      \n      return {\n        summary: summary || 'Unable to generate summary',\n        originalLength: text.length,\n        summaryLength: summary.length,\n        compressionRatio: Math.round((summary.length / text.length) * 100),\n        keyPoints: ['Service unavailable'],\n        sentiment: 'Unknown',\n        timestamp: new Date().toISOString()\n      };\n    }\n  },\n  \n  summarizeUrl: async (url, options = {}) => {\n    try {\n      const response = await apiRequest(\n        `${API_CONFIG.SUMMARIZER.baseURL}${API_CONFIG.SUMMARIZER.endpoints.summarize}`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ \n            url,\n            sentences: options.sentences || 3\n          })\n        }\n      );\n      \n      return {\n        summary: response.summary || 'No summary available',\n        originalLength: response.original_length || 0,\n        summaryLength: response.summary_length || 0,\n        compressionRatio: response.compression_ratio || 0,\n        keyPoints: response.keywords?.slice(0, 5) || [],\n        sentiment: response.sentiment_analysis?.sentiment || 'Unknown',\n        timestamp: new Date().toISOString(),\n        sentimentAnalysis: response.sentiment_analysis || {},\n        keywords: response.keywords || [],\n        readability: response.readability || {},\n        processingTime: response.processing_time || 0,\n        articleInfo: response.article_info || {},\n        qualityMetrics: response.quality_metrics || {}\n      };\n    } catch (error) {\n      console.warn('Summarizer API unavailable for URL');\n      return {\n        summary: 'Unable to summarize URL content',\n        originalLength: 0,\n        summaryLength: 0,\n        compressionRatio: 0,\n        keyPoints: ['Service unavailable'],\n        sentiment: 'Unknown',\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n};\n\n// Health check for all services\nexport const healthCheck = {\n  checkAllServices: async () => {\n    const services = {\n      newsFeed: `${API_CONFIG.NEWS_FEED.baseURL}${API_CONFIG.NEWS_FEED.endpoints.health}`,\n      factChecker: `${API_CONFIG.FACT_CHECKER.baseURL}${API_CONFIG.FACT_CHECKER.endpoints.health}`,\n      biasChecker: `${API_CONFIG.BIAS_CHECKER.baseURL}${API_CONFIG.BIAS_CHECKER.endpoints.health}`,\n      summarizer: `${API_CONFIG.SUMMARIZER.baseURL}${API_CONFIG.SUMMARIZER.endpoints.health}`\n    };\n    \n    const results = {};\n    \n    for (const [service, url] of Object.entries(services)) {\n      try {\n        const response = await fetch(url, { timeout: 5000 });\n        results[service] = response.ok;\n      } catch (error) {\n        results[service] = false;\n      }\n    }\n    \n    return results;\n  }\n};\n\nexport default {\n  newsAPI,\n  factCheckerAPI,\n  biasCheckerAPI,\n  summarizerAPI,\n  healthCheck\n};"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAG;EACjBC,SAAS,EAAE,uBAAuB;EAClCC,YAAY,EAAE,uBAAuB;EACrCC,YAAY,EAAE,uBAAuB;EACrCC,UAAU,EAAE;AACd,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;MAChCI,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEF;IAAK,CAAC;EAChC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO;MAAED,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAEA,KAAK,CAACE;IAAQ,CAAC;EACjD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG;EACrB,MAAMC,OAAOA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACzB,IAAI;MAAA,IAAAC,cAAA;MACF,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;MAEzC,IAAIH,MAAM,CAACI,QAAQ,IAAIJ,MAAM,CAACI,QAAQ,KAAK,KAAK,EAAE;QAChDF,WAAW,CAACG,MAAM,CAAC,UAAU,EAAEL,MAAM,CAACI,QAAQ,CAAC;MACjD;MACA,IAAIJ,MAAM,CAACM,OAAO,EAAE;QAClBJ,WAAW,CAACG,MAAM,CAAC,SAAS,EAAEL,MAAM,CAACM,OAAO,CAAC;MAC/C;MACA,IAAIN,MAAM,CAACO,CAAC,EAAE;QACZL,WAAW,CAACG,MAAM,CAAC,GAAG,EAAEL,MAAM,CAACO,CAAC,CAAC;MACnC;MACA,IAAIP,MAAM,CAACQ,IAAI,EAAE;QACfN,WAAW,CAACG,MAAM,CAAC,MAAM,EAAEL,MAAM,CAACQ,IAAI,CAAC;MACzC;MACA,IAAIR,MAAM,CAACS,QAAQ,IAAIT,MAAM,CAACU,KAAK,EAAE;QACnCR,WAAW,CAACG,MAAM,CAAC,UAAU,EAAEL,MAAM,CAACS,QAAQ,IAAIT,MAAM,CAACU,KAAK,CAAC;MACjE;MAEA,MAAM1B,GAAG,GAAG,GAAGN,UAAU,CAACC,SAAS,YAAYuB,WAAW,CAACS,QAAQ,CAAC,CAAC,GAAG,GAAG,GAAGT,WAAW,CAACS,QAAQ,CAAC,CAAC,GAAG,EAAE,EAAE;MAC3G,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;MACjC,MAAMQ,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAElC,IAAI,CAACP,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACE,IAAI,CAACG,KAAK,IAAI,sBAAsB,CAAC;MACvD;;MAEA;MACA,OAAO;QACLiB,QAAQ,EAAE,EAAAX,cAAA,GAAAT,IAAI,CAACoB,QAAQ,cAAAX,cAAA,uBAAbA,cAAA,CAAeY,GAAG,CAACC,OAAO;UAAA,IAAAC,eAAA;UAAA,OAAK;YACvCC,EAAE,EAAEF,OAAO,CAAC9B,GAAG,IAAIiC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACP,QAAQ,CAAC,EAAE,CAAC,CAACQ,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YAC1DC,KAAK,EAAEN,OAAO,CAACM,KAAK;YACpBC,OAAO,EAAEP,OAAO,CAACQ,WAAW,KAAKR,OAAO,CAACS,OAAO,GAAGT,OAAO,CAACS,OAAO,CAACC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,0BAA0B,CAAC;YAC1HC,MAAM,EAAE,EAAAV,eAAA,GAAAD,OAAO,CAACW,MAAM,cAAAV,eAAA,uBAAdA,eAAA,CAAgBW,IAAI,KAAI,gBAAgB;YAChDC,WAAW,EAAEb,OAAO,CAACa,WAAW;YAChC3C,GAAG,EAAE8B,OAAO,CAAC9B,GAAG;YAChBoB,QAAQ,EAAEJ,MAAM,CAACI,QAAQ,IAAI,SAAS;YACtCwB,KAAK,EAAEd,OAAO,CAACe,UAAU,IAAI,mDAAmD;YAChFC,gBAAgB,EAAEb,IAAI,CAACc,KAAK,CAACd,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;YAAE;YACvDc,MAAM,EAAElB,OAAO,CAACkB;UAClB,CAAC;QAAA,CAAC,CAAC,KAAI,EAAE;QACTC,YAAY,EAAEzC,IAAI,CAACyC,YAAY,IAAI,CAAC;QACpC1C,MAAM,EAAEC,IAAI,CAACD,MAAM,IAAI;MACzB,CAAC;IACH,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMuC,cAAc,GAAG;EAC5BC,SAAS,EAAE,MAAOC,IAAI,IAAK;IACzB,IAAI;MAAA,IAAAC,qBAAA;MACF,MAAMnD,QAAQ,GAAG,MAAMH,UAAU,CAC/B,GAAGL,UAAU,CAACE,YAAY,CAAC0D,OAAO,GAAG5D,UAAU,CAACE,YAAY,CAAC2D,SAAS,CAACC,KAAK,EAAE,EAC9E;QACEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER;QAAK,CAAC;MAC/B,CACF,CAAC;;MAED;MACA,OAAO;QACLS,OAAO,EAAE3D,QAAQ,CAAC4D,aAAa,IAAI,qBAAqB;QACxDC,UAAU,EAAE7D,QAAQ,CAAC8D,iBAAiB,IAAI,CAAC;QAC3CC,OAAO,EAAE,EAAAZ,qBAAA,GAAAnD,QAAQ,CAACgE,mBAAmB,cAAAb,qBAAA,uBAA5BA,qBAAA,CAA8BxB,GAAG,CAACC,OAAO,KAAK;UACrDM,KAAK,EAAEN,OAAO,CAACM,KAAK,IAAI,SAAS;UACjCpC,GAAG,EAAE8B,OAAO,CAACqC,IAAI,IAAI,GAAG;UACxBC,WAAW,EAAE,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC,KAAI,EAAE;QACTC,WAAW,EAAEnE,QAAQ,CAACoE,SAAS,IAAI,0BAA0B;QAC7DC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,aAAa,EAAExE,QAAQ,CAACyE,cAAc,IAAI,CAAC;QAC3CC,eAAe,EAAE1E,QAAQ,CAAC2E,gBAAgB,IAAI,KAAK;QACnDC,aAAa,EAAE5E,QAAQ,CAAC6E,cAAc,IAAI,CAAC,CAAC;QAC5C1C,OAAO,EAAEnC,QAAQ,CAACmC,OAAO,IAAI,EAAE;QAC/B2C,YAAY,EAAE9E,QAAQ,CAAC+E,aAAa,IAAI,CAAC;MAC3C,CAAC;IACH,CAAC,CAAC,OAAOtE,KAAK,EAAE;MACdC,OAAO,CAACsE,IAAI,CAAC,+CAA+C,CAAC;MAC7D;MACA,OAAO;QACLrB,OAAO,EAAE,qBAAqB;QAC9BE,UAAU,EAAE,CAAC;QACbE,OAAO,EAAE,EAAE;QACXI,WAAW,EAAE,yEAAyE;QACtFE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,cAAc,GAAG;EAC5BC,SAAS,EAAE,MAAOhC,IAAI,IAAK;IACzB,IAAI;MACF,MAAMlD,QAAQ,GAAG,MAAMH,UAAU,CAC/B,GAAGL,UAAU,CAACG,YAAY,CAACyD,OAAO,GAAG5D,UAAU,CAACG,YAAY,CAAC0D,SAAS,CAACC,KAAK,EAAE,EAC9E;QACEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER;QAAK,CAAC;MAC/B,CACF,CAAC;;MAED;MACA,OAAO;QACLiC,SAAS,EAAEnF,QAAQ,CAACoF,gBAAgB,IAAI,CAAC;QACzCC,QAAQ,EAAErF,QAAQ,CAACsF,aAAa,IAAI,SAAS;QAC7CzB,UAAU,EAAE7D,QAAQ,CAACoF,gBAAgB,IAAI,CAAC;QAC1CG,UAAU,EAAEvF,QAAQ,CAACwF,eAAe,IAAI,EAAE;QAC1CC,cAAc,EAAEC,sBAAsB,CAAC1F,QAAQ,CAACsF,aAAa,CAAC;QAC9DjB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCoB,gBAAgB,EAAE3F,QAAQ,CAAC4F,iBAAiB,IAAI,SAAS;QACzDC,gBAAgB,EAAE7F,QAAQ,CAAC8F,iBAAiB,IAAI,CAAC;QACjDC,eAAe,EAAE/F,QAAQ,CAACgG,gBAAgB,IAAI,CAAC;MACjD,CAAC;IACH,CAAC,CAAC,OAAOvF,KAAK,EAAE;MACdC,OAAO,CAACsE,IAAI,CAAC,+CAA+C,CAAC;MAC7D;MACA,OAAO;QACLG,SAAS,EAAE,CAAC;QACZE,QAAQ,EAAE,qBAAqB;QAC/BxB,UAAU,EAAE,CAAC;QACb0B,UAAU,EAAE,CAAC,gDAAgD,CAAC;QAC9DE,cAAc,EAAE,uDAAuD;QACvEpB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA,SAASmB,sBAAsBA,CAACO,YAAY,EAAE;EAC5C,MAAMC,eAAe,GAAG;IACtB,MAAM,EAAE,4FAA4F;IACpG,aAAa,EAAE,+FAA+F;IAC9G,cAAc,EAAE,6DAA6D;IAC7E,cAAc,EAAE,gGAAgG;IAChH,OAAO,EAAE,wFAAwF;IACjG,SAAS,EAAE;EACb,CAAC;EACD,OAAOA,eAAe,CAACD,YAAY,CAAC,IAAI,+DAA+D;AACzG;;AAEA;AACA,OAAO,MAAME,aAAa,GAAG;EAC3BC,SAAS,EAAE,MAAAA,CAAOlD,IAAI,EAAEnD,OAAO,GAAG,CAAC,CAAC,KAAK;IACvC,IAAI;MAAA,IAAAsG,kBAAA,EAAAC,qBAAA;MACF,MAAMC,WAAW,GAAG;QAClBrD,IAAI;QACJsD,SAAS,EAAEzG,OAAO,CAACyG,SAAS,IAAI;MAClC,CAAC;;MAED;MACA,IAAIzG,OAAO,CAACmC,KAAK,EAAEqE,WAAW,CAACrE,KAAK,GAAGnC,OAAO,CAACmC,KAAK;MACpD,IAAInC,OAAO,CAAC0G,OAAO,EAAEF,WAAW,CAACE,OAAO,GAAG1G,OAAO,CAAC0G,OAAO;MAC1D,IAAI1G,OAAO,CAACwC,MAAM,EAAEgE,WAAW,CAAChE,MAAM,GAAGxC,OAAO,CAACwC,MAAM;MACvD,IAAIxC,OAAO,CAACD,GAAG,EAAEyG,WAAW,CAACzG,GAAG,GAAGC,OAAO,CAACD,GAAG;MAE9C,MAAME,QAAQ,GAAG,MAAMH,UAAU,CAC/B,GAAGL,UAAU,CAACI,UAAU,CAACwD,OAAO,GAAG5D,UAAU,CAACI,UAAU,CAACyD,SAAS,CAAC+C,SAAS,EAAE,EAC9E;QACE7C,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC6C,WAAW;MAClC,CACF,CAAC;;MAED;MACA,OAAO;QACLpE,OAAO,EAAEnC,QAAQ,CAACmC,OAAO,IAAI,sBAAsB;QACnDuE,cAAc,EAAE1G,QAAQ,CAAC2G,eAAe,IAAIzD,IAAI,CAAC0D,MAAM;QACvDC,aAAa,EAAE7G,QAAQ,CAAC8G,cAAc,IAAI,CAAC;QAC3CC,gBAAgB,EAAE/G,QAAQ,CAACgH,iBAAiB,IAAI,CAAC;QACjDC,SAAS,EAAE,EAAAZ,kBAAA,GAAArG,QAAQ,CAACkH,QAAQ,cAAAb,kBAAA,uBAAjBA,kBAAA,CAAmBc,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAI,EAAE;QAC/CC,SAAS,EAAE,EAAAd,qBAAA,GAAAtG,QAAQ,CAACqH,kBAAkB,cAAAf,qBAAA,uBAA3BA,qBAAA,CAA6Bc,SAAS,KAAI,SAAS;QAC9D/C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnC+C,iBAAiB,EAAEtH,QAAQ,CAACqH,kBAAkB,IAAI,CAAC,CAAC;QACpDH,QAAQ,EAAElH,QAAQ,CAACkH,QAAQ,IAAI,EAAE;QACjCK,WAAW,EAAEvH,QAAQ,CAACuH,WAAW,IAAI,CAAC,CAAC;QACvCC,cAAc,EAAExH,QAAQ,CAACyH,eAAe,IAAI,CAAC;QAC7CC,WAAW,EAAE1H,QAAQ,CAAC2H,YAAY,IAAI,CAAC,CAAC;QACxCC,cAAc,EAAE5H,QAAQ,CAAC6H,eAAe,IAAI,CAAC;MAC/C,CAAC;IACH,CAAC,CAAC,OAAOpH,KAAK,EAAE;MACdC,OAAO,CAACsE,IAAI,CAAC,6CAA6C,CAAC;MAC3D;MACA,MAAMwB,SAAS,GAAGtD,IAAI,CAAC4E,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAACrB,MAAM,GAAG,CAAC,CAAC;MAClE,MAAMC,aAAa,GAAG9E,IAAI,CAACmG,GAAG,CAAC,CAAC,EAAE1B,SAAS,CAACI,MAAM,CAAC;MACnD,MAAMzE,OAAO,GAAGqE,SAAS,CAACW,KAAK,CAAC,CAAC,EAAEN,aAAa,CAAC,CAACsB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;MAEjE,OAAO;QACLhG,OAAO,EAAEA,OAAO,IAAI,4BAA4B;QAChDuE,cAAc,EAAExD,IAAI,CAAC0D,MAAM;QAC3BC,aAAa,EAAE1E,OAAO,CAACyE,MAAM;QAC7BG,gBAAgB,EAAEhF,IAAI,CAACqG,KAAK,CAAEjG,OAAO,CAACyE,MAAM,GAAG1D,IAAI,CAAC0D,MAAM,GAAI,GAAG,CAAC;QAClEK,SAAS,EAAE,CAAC,qBAAqB,CAAC;QAClCG,SAAS,EAAE,SAAS;QACpB/C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;IACH;EACF,CAAC;EAED8D,YAAY,EAAE,MAAAA,CAAOvI,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IACzC,IAAI;MAAA,IAAAuI,mBAAA,EAAAC,sBAAA;MACF,MAAMvI,QAAQ,GAAG,MAAMH,UAAU,CAC/B,GAAGL,UAAU,CAACI,UAAU,CAACwD,OAAO,GAAG5D,UAAU,CAACI,UAAU,CAACyD,SAAS,CAAC+C,SAAS,EAAE,EAC9E;QACE7C,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB5D,GAAG;UACH0G,SAAS,EAAEzG,OAAO,CAACyG,SAAS,IAAI;QAClC,CAAC;MACH,CACF,CAAC;MAED,OAAO;QACLrE,OAAO,EAAEnC,QAAQ,CAACmC,OAAO,IAAI,sBAAsB;QACnDuE,cAAc,EAAE1G,QAAQ,CAAC2G,eAAe,IAAI,CAAC;QAC7CE,aAAa,EAAE7G,QAAQ,CAAC8G,cAAc,IAAI,CAAC;QAC3CC,gBAAgB,EAAE/G,QAAQ,CAACgH,iBAAiB,IAAI,CAAC;QACjDC,SAAS,EAAE,EAAAqB,mBAAA,GAAAtI,QAAQ,CAACkH,QAAQ,cAAAoB,mBAAA,uBAAjBA,mBAAA,CAAmBnB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAI,EAAE;QAC/CC,SAAS,EAAE,EAAAmB,sBAAA,GAAAvI,QAAQ,CAACqH,kBAAkB,cAAAkB,sBAAA,uBAA3BA,sBAAA,CAA6BnB,SAAS,KAAI,SAAS;QAC9D/C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnC+C,iBAAiB,EAAEtH,QAAQ,CAACqH,kBAAkB,IAAI,CAAC,CAAC;QACpDH,QAAQ,EAAElH,QAAQ,CAACkH,QAAQ,IAAI,EAAE;QACjCK,WAAW,EAAEvH,QAAQ,CAACuH,WAAW,IAAI,CAAC,CAAC;QACvCC,cAAc,EAAExH,QAAQ,CAACyH,eAAe,IAAI,CAAC;QAC7CC,WAAW,EAAE1H,QAAQ,CAAC2H,YAAY,IAAI,CAAC,CAAC;QACxCC,cAAc,EAAE5H,QAAQ,CAAC6H,eAAe,IAAI,CAAC;MAC/C,CAAC;IACH,CAAC,CAAC,OAAOpH,KAAK,EAAE;MACdC,OAAO,CAACsE,IAAI,CAAC,oCAAoC,CAAC;MAClD,OAAO;QACL7C,OAAO,EAAE,iCAAiC;QAC1CuE,cAAc,EAAE,CAAC;QACjBG,aAAa,EAAE,CAAC;QAChBE,gBAAgB,EAAE,CAAC;QACnBE,SAAS,EAAE,CAAC,qBAAqB,CAAC;QAClCG,SAAS,EAAE,SAAS;QACpB/C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMiE,WAAW,GAAG;EACzBC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,MAAMC,QAAQ,GAAG;MACfC,QAAQ,EAAE,GAAGnJ,UAAU,CAACC,SAAS,CAAC2D,OAAO,GAAG5D,UAAU,CAACC,SAAS,CAAC4D,SAAS,CAACuF,MAAM,EAAE;MACnFC,WAAW,EAAE,GAAGrJ,UAAU,CAACE,YAAY,CAAC0D,OAAO,GAAG5D,UAAU,CAACE,YAAY,CAAC2D,SAAS,CAACuF,MAAM,EAAE;MAC5FE,WAAW,EAAE,GAAGtJ,UAAU,CAACG,YAAY,CAACyD,OAAO,GAAG5D,UAAU,CAACG,YAAY,CAAC0D,SAAS,CAACuF,MAAM,EAAE;MAC5FG,UAAU,EAAE,GAAGvJ,UAAU,CAACI,UAAU,CAACwD,OAAO,GAAG5D,UAAU,CAACI,UAAU,CAACyD,SAAS,CAACuF,MAAM;IACvF,CAAC;IAED,MAAMI,OAAO,GAAG,CAAC,CAAC;IAElB,KAAK,MAAM,CAACC,OAAO,EAAEnJ,GAAG,CAAC,IAAIoJ,MAAM,CAACC,OAAO,CAACT,QAAQ,CAAC,EAAE;MACrD,IAAI;QACF,MAAM1I,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;UAAEsJ,OAAO,EAAE;QAAK,CAAC,CAAC;QACpDJ,OAAO,CAACC,OAAO,CAAC,GAAGjJ,QAAQ,CAACG,EAAE;MAChC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACduI,OAAO,CAACC,OAAO,CAAC,GAAG,KAAK;MAC1B;IACF;IAEA,OAAOD,OAAO;EAChB;AACF,CAAC;AAED,eAAe;EACbpI,OAAO;EACPoC,cAAc;EACdiC,cAAc;EACdkB,aAAa;EACbqC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}