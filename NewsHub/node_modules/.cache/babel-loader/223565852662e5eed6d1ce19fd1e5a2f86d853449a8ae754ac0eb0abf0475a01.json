{"ast":null,"code":"class GeminiService {\n  constructor() {\n    this.baseUrl = 'http://localhost:3001/api/gemini';\n  }\n  async summarizeNews(newsContent) {\n    try {\n      const response = await fetch(`${this.baseUrl}/summarize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          newsContent: newsContent\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to generate summary');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error summarizing news:', error);\n      throw new Error('Failed to generate summary');\n    }\n  }\n  parseTextResponse(text) {\n    // Fallback parser for non-JSON responses\n    const lines = text.split('\\n').filter(line => line.trim());\n    let summary = '';\n    const keyPoints = [];\n    const entities = [];\n    let currentSection = 'summary';\n    for (const line of lines) {\n      const trimmedLine = line.trim();\n      if (trimmedLine.toLowerCase().includes('key points') || trimmedLine.toLowerCase().includes('main points')) {\n        currentSection = 'keyPoints';\n        continue;\n      }\n      if (trimmedLine.toLowerCase().includes('entities') || trimmedLine.toLowerCase().includes('people') || trimmedLine.toLowerCase().includes('organizations')) {\n        currentSection = 'entities';\n        continue;\n      }\n      if (currentSection === 'summary' && trimmedLine.length > 20) {\n        summary += (summary ? ' ' : '') + trimmedLine;\n      } else if (currentSection === 'keyPoints' && (trimmedLine.startsWith('-') || trimmedLine.startsWith('•') || trimmedLine.match(/^\\d+\\./))) {\n        keyPoints.push(trimmedLine.replace(/^[-•\\d.\\s]+/, ''));\n      } else if (currentSection === 'entities' && trimmedLine.length > 2) {\n        entities.push(trimmedLine.replace(/^[-•\\d.\\s]+/, ''));\n      }\n    }\n    return {\n      summary: summary || 'Summary not available',\n      keyPoints: keyPoints.length > 0 ? keyPoints : ['Key points not available'],\n      entities: entities.length > 0 ? entities : ['Entities not identified']\n    };\n  }\n  async summarizeByUrl(url) {\n    try {\n      // For URL-based summarization, we'll need to fetch the content first\n      // This is a simplified version - in production, you'd want proper web scraping\n      const prompt = `\nPlease provide a summary for the news article at this URL: ${url}\n\nSince I cannot directly access the URL, please provide a general response about how to summarize news articles and what key elements to look for.\n\nFormat as JSON:\n{\n  \"summary\": \"Brief explanation\",\n  \"keyPoints\": [\"Point 1\", \"Point 2\"],\n  \"entities\": [\"General guidance\"]\n}\n`;\n      const result = await this.model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n      try {\n        const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          return JSON.parse(jsonMatch[0]);\n        }\n      } catch (parseError) {\n        console.warn('Failed to parse JSON response for URL');\n      }\n      return {\n        summary: 'URL-based summarization requires content extraction',\n        keyPoints: ['Please provide article text for detailed analysis'],\n        entities: ['Content extraction needed']\n      };\n    } catch (error) {\n      console.error('Error summarizing URL:', error);\n      throw new Error('Failed to process URL. Please try with article text.');\n    }\n  }\n}\nconst geminiServiceInstance = new GeminiService();\nexport default geminiServiceInstance;","map":{"version":3,"names":["GeminiService","constructor","baseUrl","summarizeNews","newsContent","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","error","data","console","parseTextResponse","text","lines","split","filter","line","trim","summary","keyPoints","entities","currentSection","trimmedLine","toLowerCase","includes","length","startsWith","match","push","replace","summarizeByUrl","url","prompt","result","model","generateContent","jsonMatch","parse","parseError","warn","geminiServiceInstance"],"sources":["D:/Capstoneprojectai/Newsapp/NewsHub/src/services/geminiService.js"],"sourcesContent":["class GeminiService {\n  constructor() {\n    this.baseUrl = 'http://localhost:3001/api/gemini';\n  }\n\n  async summarizeNews(newsContent) {\n    try {\n      const response = await fetch(`${this.baseUrl}/summarize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          newsContent: newsContent\n        })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to generate summary');\n      }\n      \n      const data = await response.json();\n      return data;\n      \n    } catch (error) {\n      console.error('Error summarizing news:', error);\n      throw new Error('Failed to generate summary');\n    }\n  }\n\n  parseTextResponse(text) {\n    // Fallback parser for non-JSON responses\n    const lines = text.split('\\n').filter(line => line.trim());\n    \n    let summary = '';\n    const keyPoints = [];\n    const entities = [];\n    \n    let currentSection = 'summary';\n    \n    for (const line of lines) {\n      const trimmedLine = line.trim();\n      \n      if (trimmedLine.toLowerCase().includes('key points') || \n          trimmedLine.toLowerCase().includes('main points')) {\n        currentSection = 'keyPoints';\n        continue;\n      }\n      \n      if (trimmedLine.toLowerCase().includes('entities') || \n          trimmedLine.toLowerCase().includes('people') ||\n          trimmedLine.toLowerCase().includes('organizations')) {\n        currentSection = 'entities';\n        continue;\n      }\n      \n      if (currentSection === 'summary' && trimmedLine.length > 20) {\n        summary += (summary ? ' ' : '') + trimmedLine;\n      } else if (currentSection === 'keyPoints' && \n                 (trimmedLine.startsWith('-') || trimmedLine.startsWith('•') || \n                  trimmedLine.match(/^\\d+\\./))) {\n        keyPoints.push(trimmedLine.replace(/^[-•\\d.\\s]+/, ''));\n      } else if (currentSection === 'entities' && trimmedLine.length > 2) {\n        entities.push(trimmedLine.replace(/^[-•\\d.\\s]+/, ''));\n      }\n    }\n    \n    return {\n      summary: summary || 'Summary not available',\n      keyPoints: keyPoints.length > 0 ? keyPoints : ['Key points not available'],\n      entities: entities.length > 0 ? entities : ['Entities not identified']\n    };\n  }\n\n  async summarizeByUrl(url) {\n    try {\n      // For URL-based summarization, we'll need to fetch the content first\n      // This is a simplified version - in production, you'd want proper web scraping\n      const prompt = `\nPlease provide a summary for the news article at this URL: ${url}\n\nSince I cannot directly access the URL, please provide a general response about how to summarize news articles and what key elements to look for.\n\nFormat as JSON:\n{\n  \"summary\": \"Brief explanation\",\n  \"keyPoints\": [\"Point 1\", \"Point 2\"],\n  \"entities\": [\"General guidance\"]\n}\n`;\n\n      const result = await this.model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n      \n      try {\n        const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          return JSON.parse(jsonMatch[0]);\n        }\n      } catch (parseError) {\n        console.warn('Failed to parse JSON response for URL');\n      }\n      \n      return {\n        summary: 'URL-based summarization requires content extraction',\n        keyPoints: ['Please provide article text for detailed analysis'],\n        entities: ['Content extraction needed']\n      };\n      \n    } catch (error) {\n      console.error('Error summarizing URL:', error);\n      throw new Error('Failed to process URL. Please try with article text.');\n    }\n  }\n}\n\nconst geminiServiceInstance = new GeminiService();\nexport default geminiServiceInstance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}