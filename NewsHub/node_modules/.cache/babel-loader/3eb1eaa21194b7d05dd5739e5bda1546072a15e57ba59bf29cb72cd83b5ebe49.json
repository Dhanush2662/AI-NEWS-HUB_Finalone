{"ast":null,"code":"import axios from 'axios';\n\n// Base URLs for different services\nconst NEWS_API_BASE = 'http://localhost:3001/api';\nconst FACTCHECK_API_BASE = 'http://localhost:5001';\nconst BIAS_CHECKER_API_BASE = 'http://localhost:5002';\nconst SUMMARIZER_API_BASE = 'http://localhost:3002';\n\n// News Feed API\nexport const newsAPI = {\n  // Get latest news\n  getLatestNews: async (category = 'general', country = 'us') => {\n    try {\n      const response = await axios.get(`${NEWS_API_BASE}/news`, {\n        params: {\n          category,\n          country\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching news:', error);\n      throw error;\n    }\n  },\n  // Search news\n  searchNews: async (query, sortBy = 'publishedAt') => {\n    try {\n      const response = await axios.get(`${NEWS_API_BASE}/search`, {\n        params: {\n          q: query,\n          sortBy\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching news:', error);\n      throw error;\n    }\n  },\n  // Get news by category\n  getNewsByCategory: async category => {\n    try {\n      const response = await axios.get(`${NEWS_API_BASE}/category/${category}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching news by category:', error);\n      throw error;\n    }\n  }\n};\n\n// Fact Checker API\nexport const factCheckerAPI = {\n  // Check a claim\n  checkClaim: async claim => {\n    try {\n      const response = await axios.post(`${FACTCHECK_API_BASE}/api/fact-check`, {\n        claim: claim\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 120000 // 2 minutes timeout for fact checking\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error checking claim:', error);\n      throw error;\n    }\n  },\n  // Get fact check history\n  getHistory: async () => {\n    try {\n      const response = await axios.get(`${FACTCHECK_API_BASE}/api/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching fact check history:', error);\n      throw error;\n    }\n  }\n};\n\n// Bias Checker API\nexport const biasCheckerAPI = {\n  // Check bias in text or URL\n  checkBias: async (input, isUrl = false) => {\n    try {\n      const endpoint = isUrl ? '/api/bias-check-url' : '/api/bias-check';\n      const payload = isUrl ? {\n        url: input\n      } : {\n        text: input\n      };\n      const response = await axios.post(`${BIAS_CHECKER_API_BASE}${endpoint}`, payload, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 60000 // 1 minute timeout\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error checking bias:', error);\n      throw error;\n    }\n  },\n  // Get bias analysis history\n  getHistory: async () => {\n    try {\n      const response = await axios.get(`${BIAS_CHECKER_API_BASE}/api/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching bias check history:', error);\n      throw error;\n    }\n  }\n};\n\n// Summarizer API\nexport const summarizerAPI = {\n  // Summarize text\n  summarizeText: async (text, summaryType = 'brief') => {\n    try {\n      const response = await axios.post(`${SUMMARIZER_API_BASE}/api/summarize`, {\n        text: text,\n        type: summaryType\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 60000 // 1 minute timeout\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error summarizing text:', error);\n      throw error;\n    }\n  },\n  // Summarize URL\n  summarizeUrl: async (url, summaryType = 'brief') => {\n    try {\n      const response = await axios.post(`${SUMMARIZER_API_BASE}/api/summarize-url`, {\n        url: url,\n        type: summaryType\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 60000 // 1 minute timeout\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error summarizing URL:', error);\n      throw error;\n    }\n  },\n  // Get summarization history\n  getHistory: async () => {\n    try {\n      const response = await axios.get(`${SUMMARIZER_API_BASE}/api/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching summarization history:', error);\n      throw error;\n    }\n  }\n};\n\n// Health check for all services\nexport const healthAPI = {\n  checkNewsService: async () => {\n    try {\n      const response = await axios.get(`${NEWS_API_BASE}/health`);\n      return response.data;\n    } catch (error) {\n      return {\n        status: 'down',\n        error: error.message\n      };\n    }\n  },\n  checkFactCheckService: async () => {\n    try {\n      const response = await axios.get(`${FACTCHECK_API_BASE}/health`);\n      return response.data;\n    } catch (error) {\n      return {\n        status: 'down',\n        error: error.message\n      };\n    }\n  },\n  checkBiasCheckerService: async () => {\n    try {\n      const response = await axios.get(`${BIAS_CHECKER_API_BASE}/health`);\n      return response.data;\n    } catch (error) {\n      return {\n        status: 'down',\n        error: error.message\n      };\n    }\n  },\n  checkSummarizerService: async () => {\n    try {\n      const response = await axios.get(`${SUMMARIZER_API_BASE}/health`);\n      return response.data;\n    } catch (error) {\n      return {\n        status: 'down',\n        error: error.message\n      };\n    }\n  }\n};\n\n// Utility functions\nexport const utils = {\n  // Format date for display\n  formatDate: dateString => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  },\n  // Truncate text\n  truncateText: (text, maxLength = 150) => {\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + '...';\n  },\n  // Validate URL\n  isValidUrl: string => {\n    try {\n      new URL(string);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  },\n  // Get confidence color\n  getConfidenceColor: confidence => {\n    if (confidence >= 80) return '#27ae60'; // Green\n    if (confidence >= 60) return '#f39c12'; // Orange\n    return '#e74c3c'; // Red\n  },\n  // Get bias color\n  getBiasColor: bias => {\n    const colors = {\n      'Left': '#e74c3c',\n      'Left-Center': '#f39c12',\n      'Least Biased': '#27ae60',\n      'Right-Center': '#3498db',\n      'Right': '#9b59b6'\n    };\n    return colors[bias] || '#95a5a6';\n  }\n};\n\n// Error handling utility\nexport const handleApiError = error => {\n  if (error.response) {\n    // Server responded with error status\n    return {\n      message: error.response.data.message || 'Server error occurred',\n      status: error.response.status,\n      data: error.response.data\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check if the service is running.',\n      status: 0,\n      data: null\n    };\n  } else {\n    // Something else happened\n    return {\n      message: error.message || 'An unexpected error occurred',\n      status: -1,\n      data: null\n    };\n  }\n};\n\n// Default export with all APIs\nconst api = {\n  news: newsAPI,\n  factChecker: factCheckerAPI,\n  biasChecker: biasCheckerAPI,\n  summarizer: summarizerAPI,\n  health: healthAPI,\n  utils,\n  handleApiError\n};\nexport default api;","map":{"version":3,"names":["axios","NEWS_API_BASE","FACTCHECK_API_BASE","BIAS_CHECKER_API_BASE","SUMMARIZER_API_BASE","newsAPI","getLatestNews","category","country","response","get","params","data","error","console","searchNews","query","sortBy","q","getNewsByCategory","factCheckerAPI","checkClaim","claim","post","headers","timeout","getHistory","biasCheckerAPI","checkBias","input","isUrl","endpoint","payload","url","text","summarizerAPI","summarizeText","summaryType","type","summarizeUrl","healthAPI","checkNewsService","status","message","checkFactCheckService","checkBiasCheckerService","checkSummarizerService","utils","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","hour","minute","truncateText","maxLength","length","substring","isValidUrl","string","URL","_","getConfidenceColor","confidence","getBiasColor","bias","colors","handleApiError","request","api","news","factChecker","biasChecker","summarizer","health"],"sources":["D:/Capstoneprojectai/Newsapp/NewsHub/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URLs for different services\nconst NEWS_API_BASE = 'http://localhost:3001/api';\nconst FACTCHECK_API_BASE = 'http://localhost:5001';\nconst BIAS_CHECKER_API_BASE = 'http://localhost:5002';\nconst SUMMARIZER_API_BASE = 'http://localhost:3002';\n\n// News Feed API\nexport const newsAPI = {\n  // Get latest news\n  getLatestNews: async (category = 'general', country = 'us') => {\n    try {\n      const response = await axios.get(`${NEWS_API_BASE}/news`, {\n        params: { category, country }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching news:', error);\n      throw error;\n    }\n  },\n\n  // Search news\n  searchNews: async (query, sortBy = 'publishedAt') => {\n    try {\n      const response = await axios.get(`${NEWS_API_BASE}/search`, {\n        params: { q: query, sortBy }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching news:', error);\n      throw error;\n    }\n  },\n\n  // Get news by category\n  getNewsByCategory: async (category) => {\n    try {\n      const response = await axios.get(`${NEWS_API_BASE}/category/${category}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching news by category:', error);\n      throw error;\n    }\n  }\n};\n\n// Fact Checker API\nexport const factCheckerAPI = {\n  // Check a claim\n  checkClaim: async (claim) => {\n    try {\n      const response = await axios.post(`${FACTCHECK_API_BASE}/api/fact-check`, {\n        claim: claim\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 120000 // 2 minutes timeout for fact checking\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error checking claim:', error);\n      throw error;\n    }\n  },\n\n  // Get fact check history\n  getHistory: async () => {\n    try {\n      const response = await axios.get(`${FACTCHECK_API_BASE}/api/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching fact check history:', error);\n      throw error;\n    }\n  }\n};\n\n// Bias Checker API\nexport const biasCheckerAPI = {\n  // Check bias in text or URL\n  checkBias: async (input, isUrl = false) => {\n    try {\n      const endpoint = isUrl ? '/api/bias-check-url' : '/api/bias-check';\n      const payload = isUrl ? { url: input } : { text: input };\n      \n      const response = await axios.post(`${BIAS_CHECKER_API_BASE}${endpoint}`, payload, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 60000 // 1 minute timeout\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error checking bias:', error);\n      throw error;\n    }\n  },\n\n  // Get bias analysis history\n  getHistory: async () => {\n    try {\n      const response = await axios.get(`${BIAS_CHECKER_API_BASE}/api/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching bias check history:', error);\n      throw error;\n    }\n  }\n};\n\n// Summarizer API\nexport const summarizerAPI = {\n  // Summarize text\n  summarizeText: async (text, summaryType = 'brief') => {\n    try {\n      const response = await axios.post(`${SUMMARIZER_API_BASE}/api/summarize`, {\n        text: text,\n        type: summaryType\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 60000 // 1 minute timeout\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error summarizing text:', error);\n      throw error;\n    }\n  },\n\n  // Summarize URL\n  summarizeUrl: async (url, summaryType = 'brief') => {\n    try {\n      const response = await axios.post(`${SUMMARIZER_API_BASE}/api/summarize-url`, {\n        url: url,\n        type: summaryType\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 60000 // 1 minute timeout\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error summarizing URL:', error);\n      throw error;\n    }\n  },\n\n  // Get summarization history\n  getHistory: async () => {\n    try {\n      const response = await axios.get(`${SUMMARIZER_API_BASE}/api/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching summarization history:', error);\n      throw error;\n    }\n  }\n};\n\n// Health check for all services\nexport const healthAPI = {\n  checkNewsService: async () => {\n    try {\n      const response = await axios.get(`${NEWS_API_BASE}/health`);\n      return response.data;\n    } catch (error) {\n      return { status: 'down', error: error.message };\n    }\n  },\n\n  checkFactCheckService: async () => {\n    try {\n      const response = await axios.get(`${FACTCHECK_API_BASE}/health`);\n      return response.data;\n    } catch (error) {\n      return { status: 'down', error: error.message };\n    }\n  },\n\n  checkBiasCheckerService: async () => {\n    try {\n      const response = await axios.get(`${BIAS_CHECKER_API_BASE}/health`);\n      return response.data;\n    } catch (error) {\n      return { status: 'down', error: error.message };\n    }\n  },\n\n  checkSummarizerService: async () => {\n    try {\n      const response = await axios.get(`${SUMMARIZER_API_BASE}/health`);\n      return response.data;\n    } catch (error) {\n      return { status: 'down', error: error.message };\n    }\n  }\n};\n\n// Utility functions\nexport const utils = {\n  // Format date for display\n  formatDate: (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  },\n\n  // Truncate text\n  truncateText: (text, maxLength = 150) => {\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + '...';\n  },\n\n  // Validate URL\n  isValidUrl: (string) => {\n    try {\n      new URL(string);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  },\n\n  // Get confidence color\n  getConfidenceColor: (confidence) => {\n    if (confidence >= 80) return '#27ae60'; // Green\n    if (confidence >= 60) return '#f39c12'; // Orange\n    return '#e74c3c'; // Red\n  },\n\n  // Get bias color\n  getBiasColor: (bias) => {\n    const colors = {\n      'Left': '#e74c3c',\n      'Left-Center': '#f39c12',\n      'Least Biased': '#27ae60',\n      'Right-Center': '#3498db',\n      'Right': '#9b59b6'\n    };\n    return colors[bias] || '#95a5a6';\n  }\n};\n\n// Error handling utility\nexport const handleApiError = (error) => {\n  if (error.response) {\n    // Server responded with error status\n    return {\n      message: error.response.data.message || 'Server error occurred',\n      status: error.response.status,\n      data: error.response.data\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check if the service is running.',\n      status: 0,\n      data: null\n    };\n  } else {\n    // Something else happened\n    return {\n      message: error.message || 'An unexpected error occurred',\n      status: -1,\n      data: null\n    };\n  }\n};\n\n// Default export with all APIs\nconst api = {\n  news: newsAPI,\n  factChecker: factCheckerAPI,\n  biasChecker: biasCheckerAPI,\n  summarizer: summarizerAPI,\n  health: healthAPI,\n  utils,\n  handleApiError\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}