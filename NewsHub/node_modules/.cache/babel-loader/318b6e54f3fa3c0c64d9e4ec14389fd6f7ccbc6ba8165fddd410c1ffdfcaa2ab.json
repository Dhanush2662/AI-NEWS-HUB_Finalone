{"ast":null,"code":"class GeminiService {\n  constructor() {\n    this.baseUrl = 'http://localhost:3001/api/gemini';\n  }\n  async summarizeNews(newsContent) {\n    try {\n      const response = await fetch(`${this.baseUrl}/summarize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          newsContent: newsContent\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch (e) {\n          errorData = {\n            error: errorText\n          };\n        }\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to generate summary`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error summarizing news:', error);\n      throw new Error('Failed to generate summary');\n    }\n  }\n}\nconst geminiServiceInstance = new GeminiService();\nexport default geminiServiceInstance;","map":{"version":3,"names":["GeminiService","constructor","baseUrl","summarizeNews","newsContent","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","errorData","parse","e","error","Error","status","data","json","console","geminiServiceInstance"],"sources":["D:/Capstoneprojectai/Newsapp/NewsHub/src/services/geminiService.js"],"sourcesContent":["class GeminiService {\n  constructor() {\n    this.baseUrl = 'http://localhost:3001/api/gemini';\n  }\n\n  async summarizeNews(newsContent) {\n    try {\n      const response = await fetch(`${this.baseUrl}/summarize`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          newsContent: newsContent\n        })\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch (e) {\n          errorData = { error: errorText };\n        }\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to generate summary`);\n      }\n      \n      const data = await response.json();\n      return data;\n      \n    } catch (error) {\n      console.error('Error summarizing news:', error);\n      throw new Error('Failed to generate summary');\n    }\n  }\n}\n\nconst geminiServiceInstance = new GeminiService();\nexport default geminiServiceInstance;"],"mappings":"AAAA,MAAMA,aAAa,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,kCAAkC;EACnD;EAEA,MAAMC,aAAaA,CAACC,WAAW,EAAE;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACJ,OAAO,YAAY,EAAE;QACxDK,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBP,WAAW,EAAEA;QACf,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvC,IAAIC,SAAS;QACb,IAAI;UACFA,SAAS,GAAGL,IAAI,CAACM,KAAK,CAACH,SAAS,CAAC;QACnC,CAAC,CAAC,OAAOI,CAAC,EAAE;UACVF,SAAS,GAAG;YAAEG,KAAK,EAAEL;UAAU,CAAC;QAClC;QACA,MAAM,IAAIM,KAAK,CAACJ,SAAS,CAACG,KAAK,IAAI,QAAQb,QAAQ,CAACe,MAAM,8BAA8B,CAAC;MAC3F;MAEA,MAAMC,IAAI,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IAEb,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACF;AACF;AAEA,MAAMK,qBAAqB,GAAG,IAAIxB,aAAa,CAAC,CAAC;AACjD,eAAewB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}